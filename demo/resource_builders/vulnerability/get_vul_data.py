from main.utility.io_utility import *


def process_vulnerability_json(file_path = None):
    file = read_dictionary_from_file(file_path)
    cve_items = file['CVE_Items']

    print("-------------------- processing file: " + file_path + ', items: ' + str(len(cve_items)))

    tab_data = []
    pub_date_dict = {}

    for item in cve_items:

        ###### top level keys
        published_date = item['publishedDate']
        last_modified_date = item['lastModifiedDate']
        cve_data = item['cve']

        #### impact data
        try:
            impact_data = item['impact']['baseMetricV2']
            access_vector = impact_data['cvssV2']['accessVector']
            access_complexity = impact_data['cvssV2']['accessComplexity']
            confidentiality_impact = impact_data['cvssV2']['confidentialityImpact']
            integrity_impact = impact_data['cvssV2']['integrityImpact']
            availability_impact = impact_data['cvssV2']['availabilityImpact']
            base_score = impact_data['cvssV2']['baseScore']
            severity = impact_data['severity']
            exploitability_score = impact_data['exploitabilityScore']
            impact_score = impact_data['impactScore']

        except KeyError:
            access_vector = "NA"
            access_complexity = "NA"
            confidentiality_impact = "NA"
            integrity_impact = "NA"
            availability_impact = "NA"
            base_score = "NA"
            severity = "NA"
            exploitability_score = "NA"
            impact_score = "NA"

        #### cve data
        ## meta data
        meta_data = cve_data['CVE_data_meta']
        cve_id = meta_data['ID']
        ## description data
        description_data = cve_data['description']['description_data']
        description = ""
        try:
            description = dict(description_data[0])['value']
        except Exception as e:
            description = str(e)
            print(e)
        ## affected list
        affected_list = cve_data['affects']['vendor']['vendor_data']

        pub_date_dict[cve_id] = published_date[:10]

        for affected_vendor in affected_list:
            vendor_name = affected_vendor['vendor_name']
            product_list = affected_vendor['product']['product_data']
            for product in product_list:
                product_name = product['product_name']
                version_list = product['version']['version_data']
                for version in version_list:
                    version_value = version['version_value']
                    new_row = [vendor_name, product_name, version_value,
                               cve_id, published_date, last_modified_date, description,
                               access_vector, access_complexity, confidentiality_impact, integrity_impact,
                               availability_impact, base_score,
                               severity, exploitability_score, impact_score]
                tab_data.append(new_row)

    print(pub_date_dict)
    return tab_data, pub_date_dict

    print("-------------------- processed file: " + file_path)

def process_folder(folder_path, output_file_name):

    tab_data = [['VENDOR', 'PRODUCT', 'VERSION',
                 'CVE_ID', 'PUBLISHED_DATE', 'LAST_MODIFIED', 'DESCRIPTION',
                 'ACCESS_VECTOR', 'ACCESS_COMPLEXITY', 'CONFIDENTIALITY_IMPACT', 'INTEGRITY_IMPACT',
                 'AVAILABILITY_IMPACT', 'BASE_SCORE',
                 'SEVERITY', 'EXPLOITABILITY_SCORE', 'IMPACT_SCORE']]

    publish_date_dict= {}

    for dirName, subdirList, fileList in os.walk(folder_path):
        for fname in fileList:
            file_path = folder_path + fname
            file_data = process_vulnerability_json(file_path)
            tab_data.extend(file_data[0])
            publish_date_dict.update(file_data[1])

    write_list_to_csv(tab_data, get_main_path("resources/"+output_file_name))
    write_dictionary_to_file(publish_date_dict, get_main_path("resources/cve_publish_date.json"))


process_folder(get_main_path("resources/NVD/"), "test_vulnerability_data.csv")

# # import and clean data
# file1 = read_dictionary_from_file(get_main_path("resources/NVD/nvdcve-1.0-2002.json"))
# cve_items = file1["CVE_Items"]
# len(cve_items)  # 6,745
# print(cve_items[0].keys())
#
# ## check that all list items have same top level keys
# example_key = ['cve', 'configurations', 'impact', 'publishedDate', 'lastModifiedDate']
# for x in cve_items:
#     if list(x.keys()) != example_key:
#         print(x.keys())
#
# ## check 'cve' keys
# print(cve_items[0]['cve'].keys())
# cve_example_key = ['data_type', 'data_format', 'data_version', 'CVE_data_meta', 'affects', 'problemtype', 'references',
#                    'description']
# for x in cve_items:
#     if list(x['cve'].keys()) != cve_example_key:
#         print(x['cve'].keys())
# test_obj = cve_items[2]['cve']


