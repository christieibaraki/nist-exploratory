from main.scoring.vulnerability_scorer import VulnerabilityScorer
from main.utility.io_utility import *


cve_publish_dates = read_dictionary_from_file(get_main_path("resources/cve_publish_date.json"))
cve_publish_dates['CVE-2015-5639']
scan_data = read_csv_to_list(get_main_path("resources/sample_nvd_vuln_scan_results_30D.csv"))

cat_col = 26
cve_col = 29
base_score_col = 31
dest_ip_col = 35
eventtype_col = 40
host_col = 43
lastlogon_col = 46
managed_by_col = 48
os_col = 51
severity_col = 61
signature_col = 62
source_col = 63
header = scan_data[0]

results = [[header[cat_col],
            header[cve_col],
            header[base_score_col],
            header[dest_ip_col],
            header[eventtype_col],
            header[host_col],
            header[lastlogon_col],
            header[managed_by_col],
            header[os_col],
            header[severity_col],
            header[signature_col],
            header[source_col],
            'published_date',
            'base_metric',
            'age_metric',
            'weight_metric',
            'allowable_tolerance_metric',
            'score']]

scan_data.pop(0)

for row in scan_data:

    cve_id = row[cve_col]
    base_score = row[base_score_col]

    if cve_id in cve_publish_dates:
        published_date = cve_publish_dates[cve_id]

        score = VulnerabilityScorer.score(is_fva=False,
                                          is_hvf=True,
                                          base_cvss_score=float(base_score),
                                          days_to_double=90,
                                          date_failed_check_YYYYMMDD=published_date,
                                          allowable_tolerance=30)
        newrow = [row[cat_col],
                  cve_id,
                  base_score,
                  row[dest_ip_col],
                  row[eventtype_col],
                  row[host_col],
                  row[lastlogon_col],
                  row[managed_by_col],
                  row[os_col],
                  row[severity_col],
                  row[signature_col],
                  row[source_col],
                  published_date,
                  score['base_metric'],
                  score['age_metric'],
                  score['weight_metric'],
                  score['allowable_tolerance_metric'],
                  score['score']]

        results.append(newrow)

write_list_to_csv(results, get_main_path("resources/" + 'test_vulnerability_score.csv'))



