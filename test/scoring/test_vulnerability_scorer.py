import unittest
from main.scoring.vulnerability_scorer import VulnerabilityScorer

class test_vulnerability_scorer(unittest.TestCase):

    def test_compute_weigt_metric(self):

        self.assertEqual(VulnerabilityScorer.compute_weight_metric(is_fva=False, is_hvf = False), 1.0)
        self.assertEqual(VulnerabilityScorer.compute_weight_metric(is_fva=True, is_hvf = False), 2.0)
        self.assertEqual(VulnerabilityScorer.compute_weight_metric(is_fva=False, is_hvf = True), 1.5)
        self.assertEqual(VulnerabilityScorer.compute_weight_metric(is_fva=True, is_hvf = True), 3.0)

    def test_compute_days_passed(self):

        self.assertEqual(VulnerabilityScorer.compute_days_passed('2018-11-18'), 1)

    def test_compute_base_metric(self):

        self.assertEqual(VulnerabilityScorer.compute_base_metric(10.0), 10.0)
        self.assertEqual(VulnerabilityScorer.compute_base_metric(0.0), 0.0)
        self.assertEqual(VulnerabilityScorer.compute_base_metric(7.0), 3.43)

    def test_compute_age_metric(self):

        self.assertEqual(VulnerabilityScorer.compute_age_metric(90,90), 2)
