from datetime import datetime
import math

class VulnerabilityScorer():

    # def __init__(self, base_weight = 1.0 , age_weight = 1.0, hvf_weight = 1.0, allowable_tolerance_weight = 1.0):
    #
    #     self.base_weight = base_weight
    #     self.age_weight = age_weight
    #     self.hvf_weight = hvf_weight
    #     self.allowable_tolerance_weight = allowable_tolerance_weight

    @staticmethod
    def score(is_fva, is_hvf, base_cvss_score, days_to_double, system_baseline, date_failed_check_YYYYMMDD, allowable_tolerance = 30):

        days_passed = VulnerabilityScorer.compute_days_passed(date_failed_check_YYYYMMDD)

        base_metric = VulnerabilityScorer.compute_base_metric(base_cvss_score)
        age_metric = VulnerabilityScorer.compute_age_metric(days_passed, days_to_double)
        weight_metric = VulnerabilityScorer.compute_weight_metric(is_fva, is_hvf)
        allowable_tolerance_metric = 1 if days_passed> allowable_tolerance else 0


        result = {}
        result['base_metric'] = base_metric
        result['age_metric'] = age_metric
        result['weight_metric'] = weight_metric
        result['allowable_tolerance_metric'] = allowable_tolerance_metric
        result['score'] = base_metric * age_metric * weight_metric * allowable_tolerance_metric

        return result

    @staticmethod
    def compute_weight_metric(is_fva, is_hvf):

        fva_metric = 2.0 if is_fva else 1.0
        hvf_metric = 1.5 if is_hvf else 1.0
        return fva_metric * hvf_metric

    @staticmethod
    def compute_days_passed(date_YYYYMMDD):
        date_failed = datetime.strptime(date_YYYYMMDD, '%Y-%m-%d')
        today = datetime.today()
        date_diff = today - date_failed
        return date_diff.days

    @staticmethod
    def compute_base_metric(base_score):
        return (base_score**3)/100

    @staticmethod
    def compute_age_metric(days, days_to_double):
        return 1 + (math.log10(days)/math.log10(days_to_double))


